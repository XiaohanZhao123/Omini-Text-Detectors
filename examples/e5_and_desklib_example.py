"""
Test script for E5-Small and Desklib detectors.

This script demonstrates the unified interface for both supervised detectors
and compares their predictions on example texts.
"""

import sys
from pathlib import Path

sys.path.append(str(Path(__file__).resolve().parent.parent))
from omini_text.detectors import DesklibDetector, E5SmallDetector


def test_e5_small():
    """Test E5-Small detector."""
    print("=" * 80)
    print("Testing E5-Small LoRA Detector")
    print("=" * 80)

    # Initialize detector with default config
    config = {
        "model_path": "MayZhou/e5-small-lora-ai-generated-detector",
        "device": "auto",
        "threshold": 0.5,
    }

    detector = E5SmallDetector(config)

    # Test texts
    ai_text = (
        "AI detection refers to the process of identifying whether a given piece of content, "
        "such as text, images, or audio, has been generated by artificial intelligence. This is "
        "achieved using various machine learning techniques, including perplexity analysis, "
        "entropy measurements, linguistic pattern recognition, and neural network classifiers "
        "trained on human and AI-generated data."
    )

    human_text = (
        "It is estimated that a major part of the content in the internet will be generated "
        "by AI / LLMs by 2025. This leads to a lot of misinformation and credibility related "
        "issues. That is why if is important to have accurate tools to identify if a content "
        "is AI generated or human written"
    )

    # Test AI-generated text
    print("\nTest 1: AI-generated text")
    print("-" * 80)
    print(f"Text: {ai_text[:100]}...")
    result = detector.detect(ai_text)
    print(f"\nResult:")
    print(f"  Label: {'AI-generated' if result['label'] == 1 else 'Human-written'}")
    print(f"  Score: {result['score']:.4f}")
    print(f"  Tokens: {result['metadata']['num_tokens']}")

    # Test human-written text
    print("\nTest 2: Human-written text")
    print("-" * 80)
    print(f"Text: {human_text[:100]}...")
    result = detector.detect(human_text)
    print(f"\nResult:")
    print(f"  Label: {'AI-generated' if result['label'] == 1 else 'Human-written'}")
    print(f"  Score: {result['score']:.4f}")
    print(f"  Tokens: {result['metadata']['num_tokens']}")
    print()


def test_desklib():
    """Test Desklib detector."""
    print("=" * 80)
    print("Testing Desklib Detector")
    print("=" * 80)

    # Initialize detector with default config
    config = {
        "model_path": "desklib/ai-text-detector-v1.01",
        "device": "auto",
        "threshold": 0.5,
        "max_length": 768,
    }

    try:
        detector = DesklibDetector(config)

        # Test texts (same as E5-Small for comparison)
        ai_text = (
            "AI detection refers to the process of identifying whether a given piece of content, "
            "such as text, images, or audio, has been generated by artificial intelligence. This is "
            "achieved using various machine learning techniques, including perplexity analysis, "
            "entropy measurements, linguistic pattern recognition, and neural network classifiers "
            "trained on human and AI-generated data."
        )

        human_text = (
            "It is estimated that a major part of the content in the internet will be generated "
            "by AI / LLMs by 2025. This leads to a lot of misinformation and credibility related "
            "issues. That is why if is important to have accurate tools to identify if a content "
            "is AI generated or human written"
        )

        # Test AI-generated text
        print("\nTest 1: AI-generated text")
        print("-" * 80)
        print(f"Text: {ai_text[:100]}...")
        result = detector.detect(ai_text)
        print(f"\nResult:")
        print(f"  Label: {'AI-generated' if result['label'] == 1 else 'Human-written'}")
        print(f"  Score: {result['score']:.4f}")
        print(f"  Tokens: {result['metadata']['num_tokens']}")

        # Test human-written text
        print("\nTest 2: Human-written text")
        print("-" * 80)
        print(f"Text: {human_text[:100]}...")
        result = detector.detect(human_text)
        print(f"\nResult:")
        print(f"  Label: {'AI-generated' if result['label'] == 1 else 'Human-written'}")
        print(f"  Score: {result['score']:.4f}")
        print(f"  Tokens: {result['metadata']['num_tokens']}")
        print()

    except FileNotFoundError as e:
        print(f"\n⚠️  {e}")
        print()
    except Exception as e:
        print(f"\n⚠️  Error loading Desklib model: {e}")
        print("\nNote: Unable to load the Desklib model from HuggingFace.")
        print("HuggingFace repo: desklib/ai-text-detector-v1.01")
        print("Make sure you have internet connection and the model exists on HuggingFace.")
        print()


def compare_detectors():
    """Compare predictions from both detectors."""
    print("=" * 80)
    print("Comparing E5-Small and Desklib Predictions")
    print("=" * 80)

    # Initialize both detectors
    e5_config = {
        "model_path": "MayZhou/e5-small-lora-ai-generated-detector",
        "device": "auto",
        "threshold": 0.5,
    }

    desklib_config = {
        "model_path": "desklib/ai-text-detector-v1.01",
        "device": "auto",
        "threshold": 0.5,
        "max_length": 768,
    }

    e5_detector = E5SmallDetector(e5_config)

    # Test text (define before try block to avoid UnboundLocalError)
    text = (
        "The rain cascades endlessly from Vancouver's steel-grey winter skies, "
        "transforming the city streets into glistening mirrors that reflect the "
        "moody silhouettes of snow-dusted mountains."
    )

    print(f"\nTest Text: {text}\n")

    try:
        desklib_detector = DesklibDetector(desklib_config)

        # Get predictions from both
        e5_result = e5_detector.detect(text)
        desklib_result = desklib_detector.detect(text)

        # Compare results
        print("Detector Comparison:")
        print(f"{'Metric':<20} {'E5-Small':<20} {'Desklib':<20}")
        print("-" * 60)
        print(
            f"{'Label':<20} {('AI' if e5_result['label'] == 1 else 'Human'):<20} {('AI' if desklib_result['label'] == 1 else 'Human'):<20}"
        )
        print(
            f"{'Score':<20} {e5_result['score']:<20.4f} {desklib_result['score']:<20.4f}"
        )
        print(
            f"{'Tokens':<20} {e5_result['metadata']['num_tokens']:<20} {desklib_result['metadata']['num_tokens']:<20}"
        )
        print()

    except FileNotFoundError as e:
        print(f"\n⚠️  {e}")
        print("\nShowing E5-Small results only:\n")

        e5_result = e5_detector.detect(text)
        print("E5-Small Result:")
        print(
            f"  Label: {'AI-generated' if e5_result['label'] == 1 else 'Human-written'}"
        )
        print(f"  Score: {e5_result['score']:.4f}")
        print(f"  Tokens: {e5_result['metadata']['num_tokens']}")
        print()
    except Exception as e:
        print(f"\n⚠️  Error loading Desklib detector: {e}")
        print("\nShowing E5-Small results only:\n")

        e5_result = e5_detector.detect(text)
        print("E5-Small Result:")
        print(
            f"  Label: {'AI-generated' if e5_result['label'] == 1 else 'Human-written'}"
        )
        print(f"  Score: {e5_result['score']:.4f}")
        print(f"  Tokens: {e5_result['metadata']['num_tokens']}")
        print()


if __name__ == "__main__":
    # Test E5-Small detector (always available from HuggingFace)
    test_e5_small()

    # Test Desklib detector (will auto-download if not available locally)
    test_desklib()
    compare_detectors()
